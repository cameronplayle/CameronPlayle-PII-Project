---
title: "An example exploratory analysis script with code pulled in"
date: "2024-02-07"
output: html_document
---

  
  
This Quarto file loads the cleaned data and does some exploring.

This is essentially the same as the other `exploratory_analysis` Quarto file, but now the code is not inside this file. Instead, it is pulled in from the R script `exploratorycode.R` using the code chunk labels.

Also note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you'll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.

As part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.

Start by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables. 

Plots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.



# Setup
Load the chunk.


Load the packages.
```{r,packages, echo=FALSE,message=FALSE}

install.packages("dplR")
library(dplyr)
library(readr)
library(stringr)
library(dplR)
options(repos = c(CRAN = "https://github.com/cameronplayle/CameronPlayle-PII-Project.git"))
```

Load the data.

```{r,loaddata}

pitchdata <- read.csv("C:/Users/cplay/Downloads/savant_data.csv")
tommyjohn <- read.csv("C:/Users/cplay/Downloads/TommyJohnData.csv")

pitchdata

```

```{r}

# data cleaning

cleanpitch <- pitchdata %>%
  mutate(first_name = str_trim(str_extract(player_name, "(?<=, ).*")),
         last_name = str_trim(str_extract(player_name, ".*(?=,)")),
         player_name_clean = paste(first_name, last_name)) %>%
  select(-player_name, -first_name, -last_name)

colnames(tommyjohn)[1] <- "player_name" # Rename Name to player_name in tommy_john_data

```

```{r}
# Merge datasets on player_name
merged_data <- left_join(tommyjohn, cleanpitch, by = c("player_name" = "player_name_clean"))
```



# Data exploration through tables

Showing a bit of code to produce and save a summary table.


```{r,table1}
str(merged_data)
head(merged_data)
```
```{r}
# Calculate average speeds and spin rates for each pitch type
average_data <- merged_data %>%
  mutate(
    avg_ff_speed = rowMeans(select(., FF_release_speed, SI_release_speed), na.rm = TRUE),
    avg_ff_spin = rowMeans(select(., FF_release_spin_rate, SI_release_spin_rate), na.rm = TRUE),
    avg_ch_speed = CH_release_speed,
    avg_ch_spin = CH_release_spin_rate,
    avg_cu_speed = CU_release_speed,
    avg_cu_spin = CU_release_spin_rate,
    avg_fc_speed = FC_release_speed,
    avg_fc_spin = FC_release_spin_rate,
    avg_sl_speed = SL_release_speed,
    avg_sl_spin = SL_release_spin_rate
  ) %>%
  select(player_name, avg_ff_speed, avg_ff_spin, avg_ch_speed, avg_ch_spin, avg_cu_speed, avg_cu_spin, avg_fc_speed, avg_fc_spin, avg_sl_speed, avg_sl_spin, TJS)


```



We are saving the results to the `results` folder. Depending on how many tables/figures you have, it might make sense to have separate folders for each. And/or you could have separate folders for exploratory tables/figures and for final tables/figures. Just choose a setup that makes sense for your project and works for you, and provide enough documentation that someone can understand what you are doing.

```{r}
library(ggplot2)
library(tidyr)

# Reshape data for easier plotting
speed_data <- average_data %>%
  select(player_name, avg_ff_speed, avg_ch_speed, avg_cu_speed, avg_fc_speed, avg_sl_speed, TJS) %>%
  gather(key = "pitch_type", value = "speed", -player_name, -TJS)

spin_data <- average_data %>%
  select(player_name, avg_ff_spin, avg_ch_spin, avg_cu_spin, avg_fc_spin, avg_sl_spin, TJS) %>%
  gather(key = "pitch_type", value = "spin_rate", -player_name, -TJS)

# 1. Distribution of average speeds for different pitch types
ggplot(speed_data, aes(x = pitch_type, y = speed, fill = pitch_type)) +
  geom_boxplot() +
  labs(title = "Distribution of Average Speeds for Different Pitch Types", x = "Pitch Type", y = "Speed (mph)") +
  theme_minimal()

# 2. Distribution of average spin rates for different pitch types
ggplot(spin_data, aes(x = pitch_type, y = spin_rate, fill = pitch_type)) +
  geom_boxplot() +
  labs(title = "Distribution of Average Spin Rates for Different Pitch Types", x = "Pitch Type", y = "Spin Rate (rpm)") +
  theme_minimal()

# 3. Comparison of average speeds for pitchers with and without Tommy John surgery
ggplot(speed_data, aes(x = TJS, y = speed, fill = as.factor(TJS))) +
  geom_boxplot() +
  facet_wrap(~pitch_type) +
  labs(title = "Comparison of Average Speeds for Pitchers with and without Tommy John Surgery", x = "Tommy John Surgery (0 = No, 1 = Yes)", y = "Speed (mph)") +
  theme_minimal()

# 4. Comparison of average spin rates for pitchers with and without Tommy John surgery
ggplot(spin_data, aes(x = TJS, y = spin_rate, fill = as.factor(TJS))) +
  geom_boxplot() +
  facet_wrap(~pitch_type) +
  labs(title = "Comparison of Average Spin Rates for Pitchers with and without Tommy John Surgery", x = "Tommy John Surgery (0 = No, 1 = Yes)", y = "Spin Rate (rpm)") +
  theme_minimal()
```

# Data exploration through figures

Histogram plots for the continuous outcomes. 

Height first.

```{r,height}
```

Now weights.

```{r,weight}
```

Now height as function of weight.

```{r,fitfig1}
```

Once more height as function of weight, stratified by gender. Note that there is so little data, it's a bit silly. But we'll plot it anyway.

```{r,fitfig2}
```



# Notes

For your own explorations, tables and figures can be "quick and dirty". As long as you can see what's going on, there is no need to polish them. That's in contrast to figures you'll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible.


