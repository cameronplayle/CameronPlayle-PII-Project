---
title: "An example exploratory analysis script"
date: "2024-02-07"
output: html_document
---

  This File contains all code needed to replicate this project. 
  

# Setup

```{r}
#load needed packages. make sure they are installed.
library(here) #for data loading/saving
library(dplyr)
library(skimr)
library(ggplot2)
```


Load the data.

```{r}
pitchdata <- read.csv("C:/Users/cplay/Downloads/savant_data.csv")
tommyjohn <- read.csv("C:/Users/cplay/Downloads/TommyJohnData.csv")

pitchdata
```





# Data Cleaning




```{r}
# data cleaning
library(here) #for data loading/saving
library(dplyr)
library(skimr)
library(ggplot2)
library(stringr)
cleanpitch <- pitchdata %>%
  mutate(first_name = str_trim(str_extract(player_name, "(?<=, ).*")),
         last_name = str_trim(str_extract(player_name, ".*(?=,)")),
         player_name_clean = paste(first_name, last_name)) %>%
  select(-player_name, -first_name, -last_name)

colnames(tommyjohn)[1] <- "player_name" # Rename Name to player_name in tommy_john_data
```


# Data Cleaning Continued


```{r}
# Merge datasets on player_name
merged_data <- left_join(tommyjohn, cleanpitch, by = c("player_name" = "player_name_clean"))
```

Data Exploration

```{r}
str(merged_data)
head(merged_data) 
```

Data Viz SetUp

```{r}
# Calculate average speeds and spin rates for each pitch type
average_data <- merged_data %>%
  mutate(
    avg_ff_speed = rowMeans(select(., FF_release_speed, SI_release_speed), na.rm = TRUE),
    avg_ff_spin = rowMeans(select(., FF_release_spin_rate, SI_release_spin_rate), na.rm = TRUE),
    avg_ch_speed = CH_release_speed,
    avg_ch_spin = CH_release_spin_rate,
    avg_cu_speed = CU_release_speed,
    avg_cu_spin = CU_release_spin_rate,
    avg_fc_speed = FC_release_speed,
    avg_fc_spin = FC_release_spin_rate,
    avg_sl_speed = SL_release_speed,
    avg_sl_spin = SL_release_spin_rate
  ) %>%
  select(player_name, avg_ff_speed, avg_ff_spin, avg_ch_speed, avg_ch_spin, avg_cu_speed, avg_cu_spin, avg_fc_speed, avg_fc_spin, avg_sl_speed, avg_sl_spin, TJS)

```




```{r}
library(ggplot2)
library(dplyr)

# Create the data frame
data <- data.frame(
  pitch_type = c("avg_ch_speed", "avg_ch_spin", "avg_cu_speed", "avg_cu_spin",
                 "avg_fc_speed", "avg_fc_spin", "avg_ff_speed", "avg_ff_spin",
                 "avg_sl_speed", "avg_sl_spin"),
  average_value = c(85.92492, 1796.68693, 78.69543, 2389.74542, 
                    89.56959, 2333.64085, 93.42632, 2235.64528, 
                    84.68511, 2357.68692)
)

# Separate data for speed and spin
simple_speed_data <- data %>%
  filter(grepl("speed", pitch_type))

simple_spin_data <- data %>%
  filter(grepl("spin", pitch_type))

# Plot for average speed
ggplot(simple_speed_data, aes(x = pitch_type, y = average_value, fill = pitch_type)) +
  geom_bar(stat = "identity") +
  labs(title = "Average Pitch Speeds",
       x = "Pitch Type",
       y = "Average Speed (mph)") +
  theme_minimal() +
  scale_fill_brewer(palette = "Blues")

# Plot for average spin rate
ggplot(simple_spin_data, aes(x = pitch_type, y = average_value, fill = pitch_type)) +
  geom_bar(stat = "identity") +
  labs(title = "Average Pitch Spin Rates",
       x = "Pitch Type",
       y = "Average Spin Rate (rpm)") +
  theme_minimal() +
  scale_fill_brewer(palette = "Greens")

```




Data Viz

```{r}
library(ggplot2)
library(tidyr)

# Reshape data for easier plotting
speed_data <- average_data %>%
  select(player_name, avg_ff_speed, avg_ch_speed, avg_cu_speed, avg_fc_speed, avg_sl_speed, TJS) %>%
  gather(key = "pitch_type", value = "speed", -player_name, -TJS)

spin_data <- average_data %>%
  select(player_name, avg_ff_spin, avg_ch_spin, avg_cu_spin, avg_fc_spin, avg_sl_spin, TJS) %>%
  gather(key = "pitch_type", value = "spin_rate", -player_name, -TJS)

# 1. Distribution of average speeds for different pitch types
ggplot(speed_data, aes(x = pitch_type, y = speed, fill = pitch_type)) +
  geom_boxplot() +
  labs(title = "Distribution of Average Speeds for Different Pitch Types", x = "Pitch Type", y = "Speed (mph)") +
  theme_minimal()

# 2. Distribution of average spin rates for different pitch types
ggplot(spin_data, aes(x = pitch_type, y = spin_rate, fill = pitch_type)) +
  geom_boxplot() +
  labs(title = "Distribution of Average Spin Rates for Different Pitch Types", x = "Pitch Type", y = "Spin Rate (rpm)") +
  theme_minimal()

# 3. Comparison of average speeds for pitchers with and without Tommy John surgery
ggplot(speed_data, aes(x = TJS, y = speed, fill = as.factor(TJS))) +
  geom_boxplot() +
  facet_wrap(~pitch_type) +
  labs(title = "Comparison of Average Speeds for Pitchers with and without Tommy John Surgery", x = "Tommy John Surgery (0 = No, 1 = Yes)", y = "Speed (mph)") +
  theme_minimal()

# 4. Comparison of average spin rates for pitchers with and without Tommy John surgery
ggplot(spin_data, aes(x = TJS, y = spin_rate, fill = as.factor(TJS))) +
  geom_boxplot() +
  facet_wrap(~pitch_type) +
  labs(title = "Comparison of Average Spin Rates for Pitchers with and without Tommy John Surgery", x = "Tommy John Surgery (0 = No, 1 = Yes)", y = "Spin Rate (rpm)") +
  theme_minimal() 
```




1. Logistic Model

```{r}

options(repos = c(CRAN = "https://github.com/cameronplayle/CameronPlayle-PII-Project.git"))

# Now install the packages
install.packages(c("tidymodels", "dplyr", "readr", "ggplot2"), checkBuilt = FALSE)

# Load necessary libraries
install.packages(c("tidymodels", "dplyr", "readr", "ggplot2"), checkBuilt = FALSE)
library(tidymodels)
library(dplyr)
library(readr)

# Remove rows with any missing values
average_data <- average_data %>%
  drop_na()

# Preprocess the data
average_data <- average_data %>%
  mutate(TJS = as.factor(TJS))

# Split the data
set.seed(123)
data_split <- initial_split(average_data, prop = 0.8)
train_data <- training(data_split)
test_data <- testing(data_split)

# Define a recipe
recipe <- recipe(TJS ~ avg_ff_speed + avg_ff_spin + avg_ch_speed + avg_ch_spin + avg_cu_speed + avg_cu_spin + avg_fc_speed + avg_fc_spin + avg_sl_speed + avg_sl_spin, data = train_data) %>%
  step_normalize(all_predictors())

# Define a logistic regression model
logistic_model <- logistic_reg() %>%
  set_engine("glm") %>%
  set_mode("classification")

# Create a workflow
logistic_workflow <- workflow() %>%
  add_recipe(recipe) %>%
  add_model(logistic_model)

# Fit the model
logistic_fit <- logistic_workflow %>%
  fit(data = train_data)

# Print the model summary
print(logistic_fit)
```





```{r}
# Predict probabilities on the test data
predictions <- logistic_fit %>%
  predict(new_data = test_data, type = "prob")

# Verify the structure of predictions and test_data
str(predictions)
str(test_data)

# Combine predictions with test data to ensure 'TJS' is present
test_results <- test_data %>%
  bind_cols(predictions)

# Check if the 'TJS' column exists and is correctly formatted
if("TJS" %in% colnames(test_results)) {
  test_results$TJS <- as.factor(test_results$TJS)  # Ensure TJS is a factor
}

# Visualize ROC curve
roc_curve_data <- test_results %>%
  roc_curve(truth = TJS, .pred_1)

# Plot the ROC curve
autoplot(roc_curve_data)



```


2. Support Vector Machine (SVM)

```{r}
# Define an SVM model with a radial basis function (RBF) kernel
svm_model <- svm_rbf() %>%
  set_engine("kernlab") %>%
  set_mode("classification")

# Create a workflow
svm_workflow <- workflow() %>%
  add_recipe(recipe) %>%
  add_model(svm_model)

# Fit the model and assign it to svm_fit
svm_fit <- svm_workflow %>%
  fit(data = train_data)
# Convert TJS to a factor if it isn't already
test_data <- test_data %>%
  mutate(TJS = as.factor(TJS))

# Generate predictions and combine with test data
svm_predictions <- predict(svm_fit, new_data = test_data, type = "prob")
test_results <- bind_cols(test_data, svm_predictions)

# Verify that TJS is a factor and .pred_1 is numeric
str(test_results)

# Generate and plot ROC curve
roc_curve_data_svm <- roc_curve(test_results, truth = TJS, .pred_1)
autoplot(roc_curve_data_svm)
```
```{r}
# Ensure TJS is a factor
test_data <- test_data %>%
  mutate(TJS = as.factor(TJS))

# Generate predictions (assuming svm_fit is your fitted model)
svm_predictions <- predict(svm_fit, new_data = test_data, type = "prob")

# Combine predictions with test data
test_results <- bind_cols(test_data, svm_predictions)

# Calculate ROC curve data
roc_curve_data_svm <- roc_curve(test_results, truth = TJS, .pred_1)

# Print ROC curve results
print(roc_curve_data_svm)

```


# Notes




